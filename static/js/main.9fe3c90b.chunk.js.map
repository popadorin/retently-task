{"version":3,"sources":["assets/images/right_image.png","assets/images/right_image@2x.png","assets/images/check.svg","assets/images/css.svg","assets/images/html.svg","assets/images/cloud_upload.svg","assets/fonts/Heebo/Heebo-ExtraBold.ttf","assets/fonts/Open_Sans/OpenSans-Regular.ttf","assets/images/index.js","components/DragNDropZone.js","config/mockFiles.js","components/ProgressBar.js","config/index.js","components/FileListItem.js","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","rightImage","rightImageBig","cssIcon","checkIcon","htmlIcon","cloudUpload","DragNDropZone","onDrop","useDropzone","getRootProps","getInputProps","className","src","Images","alt","mockFiles","lastModified","name","type","loadProgress","ProgressBar","percentage","style","width","Extensions","IconsPerExtension","FileListItem","file","index","icon","progress","key","Form","useState","email","setEmail","setFiles","useCallback","acceptedFiles","console","log","prevState","concat","value","onChange","e","target","map","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,uDCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,mQCO5B,GACbC,eACAC,kBACAC,YACAC,cACAC,aACAC,iB,QCSaC,EAlBO,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAAY,EACIC,YAAY,CAACD,WAA5CE,EAD2B,EAC3BA,aAAcC,EADa,EACbA,cAErB,OACE,uCAAKC,UAAU,mBAAsBF,KACnC,0BAAWC,KAET,oCACE,yBAAKE,IAAKC,EAAOR,YAAaS,IAAI,gBAClC,uBAAGH,UAAU,uBAAb,2BACA,uBAAGA,UAAU,0BAAb,MACA,uBAAGA,UAAU,0BAA0B,aCfpCI,EAAY,CACvB,CACEC,aAAc,EACdC,KAAM,qBACNC,KAAM,WACNC,aAAc,KAEhB,CACEH,aAAc,EACdC,KAAM,yBACNC,KAAM,YACNC,aAAc,KCDHC,EARK,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACpB,OACE,yBAAKV,UAAU,gBACb,yBAAKA,UAAU,SAASW,MAAO,CAAEC,MAAM,GAAD,OAAKF,EAAL,U,OCHtCG,EACC,WADDA,EAEE,YAGKC,GAAiB,mBAC3BD,EAAiBX,EAAOX,SADG,cAE3BsB,EAAkBX,EAAOT,UAFE,GCwBfsB,EA1BM,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACrBC,EAAOJ,EAAkBE,EAAKT,MAC9BY,EAAWH,EAAKR,aAEtB,OACE,wBAAIR,UAAqB,IAAViB,EAAc,iBAAmB,GAAIG,IAAKJ,EAAKX,cAC5D,yBAAKL,UAAU,QACZkB,GAAQ,yBAAKjB,IAAKiB,EAAMf,IAAI,SAC7B,yBAAKH,UAAU,8BACb,yBAAKA,UAAU,iCACb,uBAAGA,UAAyB,aAAdgB,EAAKT,KAAsB,gBAAkB,aACxDS,EAAKV,MAGO,MAAba,EACI,yBAAKlB,IAAKC,EAAOV,UAAWW,IAAI,UAChC,0BAAMH,UAAU,2BAAhB,UAA8CmB,EAA9C,OAGPA,GAAyB,MAAbA,GAAoB,kBAAC,EAAD,CAAaT,WAAYS,QCMrDE,EAzBF,WAAO,IAAD,EACSC,mBAAS,yBADlB,mBACVC,EADU,KACHC,EADG,OAESF,mBAAS,IAFlB,mBAEHG,GAFG,WAIX7B,EAAS8B,uBAAY,SAAAC,GACzBC,QAAQC,IAAI,mBAAoBF,GAChCF,GAAS,SAAAK,GAAS,OAAIA,EAAUC,OAAOJ,QACtC,IAEH,OACE,0BAAM3B,UAAU,QACd,6BACE,wBAAIA,UAAU,eAAe,kBAC7B,uBAAGA,UAAU,oBAAoB,6BACjC,2BAAOA,UAAU,mBAAmBO,KAAK,QAAQyB,MAAOT,EAAOU,SAAU,SAACC,GAAD,OAAOV,EAASU,EAAEC,OAAOH,WAEpG,4BACG5B,EAAUgC,KAAI,SAACpB,EAAMC,GAAP,OAAiB,kBAAC,EAAD,CAAcD,KAAMA,EAAMC,MAAOA,QAEnE,kBAAC,EAAD,CAAerB,OAAQA,IACvB,4BAAQW,KAAK,SAASP,UAAU,cAAc,U,MCNrCqC,MAbf,WACE,OACE,yBAAKrC,UAAU,QACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,mBACb,kBAAC,IAAD,CAAaC,IAAK,CAACC,EAAOb,WAAYa,EAAOZ,eAAgBa,IAAI,mBCDrDmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9fe3c90b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/right_image.6b247234.png\";","module.exports = __webpack_public_path__ + \"static/media/right_image@2x.c4d15ed4.png\";","module.exports = __webpack_public_path__ + \"static/media/check.b548d919.svg\";","module.exports = __webpack_public_path__ + \"static/media/css.9f2b38f6.svg\";","module.exports = __webpack_public_path__ + \"static/media/html.c43ecc80.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloud_upload.63e85282.svg\";","module.exports = __webpack_public_path__ + \"static/media/Heebo-ExtraBold.14a92790.ttf\";","module.exports = __webpack_public_path__ + \"static/media/OpenSans-Regular.3ed9575d.ttf\";","import rightImage from './right_image.png';\nimport rightImageBig from './right_image@2x.png';\nimport checkIcon from './check.svg';\nimport cssIcon from './css.svg';\nimport htmlIcon from './html.svg';\nimport cloudUpload from './cloud_upload.svg';\n\nexport default {\n  rightImage,\n  rightImageBig,\n  cssIcon,\n  checkIcon,\n  htmlIcon,\n  cloudUpload,\n}\n","import React from 'react';\nimport Images from '../assets/images';\nimport {useDropzone} from 'react-dropzone';\n\nconst DragNDropZone = ({onDrop}) => {\n  const {getRootProps, getInputProps} = useDropzone({onDrop});\n\n  return (\n    <div className=\"form-files-drop\" {...getRootProps()}>\n      <input {...getInputProps()} />\n      {\n        <>\n          <img src={Images.cloudUpload} alt=\"cloud image\"/>\n          <p className=\"form-drag-drop-text\">Drag and drop file here</p>\n          <p className=\"form-drag-drop-or-text\">or</p>\n          <p className=\"form-files-drop-browse\">{'browse'}</p>\n        </>\n      }\n    </div>\n  );\n};\n\nexport default DragNDropZone;\n","export const mockFiles = [\n  {\n    lastModified: 1,\n    name: 'smart-layur-ui.css',\n    type: 'text/css',\n    loadProgress: 100,\n  },\n  {\n    lastModified: 2,\n    name: 'ruddy-cream-task1.html',\n    type: 'text/html',\n    loadProgress: 50,\n  }\n];\n","import React from 'react';\n\nconst ProgressBar = ({percentage}) => {\n  return (\n    <div className=\"progress-bar\">\n      <div className=\"filler\" style={{ width: `${percentage}%` }} />\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import Images from '../assets/images';\n\nconst Extensions = {\n  CSS: 'text/css',\n  HTML: 'text/html',\n};\n\nexport const IconsPerExtension = {\n  [Extensions.CSS]: Images.cssIcon,\n  [Extensions.HTML]: Images.htmlIcon,\n};\n","import React from 'react';\nimport Images from '../assets/images';\nimport ProgressBar from './ProgressBar';\nimport {IconsPerExtension} from '../config';\n\nconst FileListItem = ({file, index}) => {\n  const icon = IconsPerExtension[file.type];\n  const progress = file.loadProgress;\n\n  return (\n    <li className={index !== 0 ? 'form-list-item' : ''} key={file.lastModified}>\n      <div className=\"file\">\n        {icon && <img src={icon} alt=\"icon\"/>}\n        <div className=\"file-name-and-progress-bar\">\n          <div className=\"file-name-and-progress-status\">\n            <p className={file.type === 'text/css' ? 'file-name-css' : 'file-name'}>\n              {file.name}\n            </p>\n            {\n              progress === 100\n                ? <img src={Images.checkIcon} alt=\"check\"/>\n                : <span className=\"form-list-item-progress\">{`${progress}%`}</span>\n            }\n          </div>\n          {progress && progress !== 100 && <ProgressBar percentage={progress}/>}\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default FileListItem;\n","import React, {useCallback, useState} from 'react';\nimport DragNDropZone from \"./DragNDropZone\";\nimport {mockFiles} from \"../config/mockFiles\";\nimport FileListItem from \"./FileListItem\";\n\nconst Form = () => {\n  const [email, setEmail] = useState('ruddy.cream@gmail.com');\n  const [files, setFiles] = useState([]);\n\n  const onDrop = useCallback(acceptedFiles => {\n    console.log('accepted files: ', acceptedFiles);\n    setFiles(prevState => prevState.concat(acceptedFiles));\n  }, []);\n\n  return (\n    <form className=\"form\">\n      <div>\n        <h1 className=\"form-header\">{'Transfer files'}</h1>\n        <p className=\"form-email-label\">{'Send files to this email:'}</p>\n        <input className=\"form-email-input\" type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)}/>\n      </div>\n      <ul>\n        {mockFiles.map((file, index) => <FileListItem file={file} index={index}/>)}\n      </ul>\n      <DragNDropZone onDrop={onDrop}/>\n      <button type=\"submit\" className=\"submit-btn\">{'Send'}</button>\n    </form>\n  )\n};\n\nexport default Form;\n","import React from 'react';\nimport RetinaImage from 'react-retina-image';\nimport Form from './components/Form';\nimport Images from './assets/images';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <div className=\"form-container\">\n        <Form/>\n      </div>\n      <div className=\"image-container\">\n        <RetinaImage src={[Images.rightImage, Images.rightImageBig]} alt=\"right image\"/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/fonts/Heebo/Heebo-ExtraBold.ttf'\nimport './assets/fonts/Open_Sans/OpenSans-Regular.ttf'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}